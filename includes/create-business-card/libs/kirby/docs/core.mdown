## Core

The core class helps to handle errors in a very stripped down way and has a little built-in trace function.


### How to handle errors and stuff with the core

There are a lot of cool PHP features to handle errors, but I could never adjust to them. Here's my way to do it:

    function somefunction($a) {
        
        if($a==5) return array(
            'status' => 'success',
            'msg' => 'That is exactly what we needed!'
        );
        
        return array(
            'status' => 'error',
            'msg' => 'Please provide a valid value for $a'
        );            
        
    }

    // call the function
    $response = somefunction(5);

    // handling errors within the function is very easy now:
    if(core::error($response)) echo core::msg($response);


All you have to do is to return an array with a status value and a msg value. You can add as many additional values to the array as you want. This way to handle errors does not make sense for small functions, where returning true or false does a better job.

----

### Function: core::status

Return the status from a core respone

#### Syntax    

    core::status('response');

#### Arguments

1. response - (array) the response from a function

#### Returns

- (string) returns either error or success

#### Example
    
    function somefunction($a) {
        
        if($a==5) return array(
            'status' => 'success',
            'msg' => 'That is exactly what we needed!'
        );
        
        return array(
            'status' => 'error',
            'msg' => 'Please provide a valid value for $a'
        );            
        
    }

    echo core::status(somefunction(5));
    // output: success    

    echo core::status(somefunction(4));
    // output: error

----

### Function: core::msg

Return the message from a core respone

#### Syntax    

    core::msg('response');

#### Arguments

1. response - (array) the response from a function

#### Returns

- (string) returns the message string

#### Example
    
    function somefunction($a) {
        
        if($a==5) return array(
            'status' => 'success',
            'msg' => 'That is exactly what we needed!'
        );
        
        return array(
            'status' => 'error',
            'msg' => 'Please provide a valid value for $a'
        );            
        
    }

    echo core::msg(somefunction(5));
    // output: 'That is exactly what we needed!'

    echo core::msg(somefunction(4));
    // output: 'Please provide a valid value for $a'


----


### Function: core::error

Checks wheater the response contains an error or not.

#### Syntax    

    core::error('response');

#### Arguments

1. response - (array) the response from a function

#### Returns

- (boolean) true: the response contains an error, otherwise return false

#### Example
    
    function somefunction($a) {
        
        if($a==5) return array(
            'status' => 'success',
            'msg' => 'That is exactly what we needed!'
        );
        
        return array(
            'status' => 'error',
            'msg' => 'Please provide a valid value for $a'
        );            
        
    }

    $response = somefunction(5);
    if(core::error($response)) echo 'Ups, that failed!';
    // output: nothing

    $response = somefunction(4);
    if(core::error($response)) echo 'Ups, that failed!';
    // output: 'Ups, that failed!'


----


### Function: core::trace

Simple function to trace stuff for debugging.

#### Syntax    

    core::trace(['msg']);

#### Arguments

1. msg - (string) the stuff you want to trace

#### Returns

- (mixed) return either nothing or if you don't specify a msg it returns the whole trace array 

#### Example
    
    core::trace('this is my super duper trace message');

    // later
    core::trace('this is another super duper trace message');

    // later
    $trace = core::trace();
    
    // trace: array(
    //    'this is my super duper trace message',
    //    'this is another super duper trace message'
    // );
